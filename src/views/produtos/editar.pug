doctype html
html(lang="pt-br")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Editar Produto
    link(rel="stylesheet", href="/css/style.css")
    style.
      .opcoes-wrapper {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 10px;
      }
      .opcao-btn {
        padding: 6px 14px;
        border: 1px solid #000;
        border-radius: 5px;
        background: transparent;
        cursor: pointer;
        transition: 0.3s;
      }
      .opcao-btn.selected {
        background-color: #000;
        color: #fff;
        font-weight: bold;
      }
      .botoes-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 25px;
      }
      .btn-laranja {
        background-color: #b7410e;
        color: #fff;
        border: none;
        border-radius: 6px;
        padding: 10px 20px;
        font-size: 1rem;
        cursor: pointer;
        transition: 0.3s;
        width: %;
      }
      .btn-laranja:hover {
        background-color: #96340c;
      }

  body
    .page-container
      .form-container
        h2 Editar Produto

        form(action="/produtos/" + produto.id + "/editar", method="post", enctype="multipart/form-data")
          label Nome:
          input(type="text", name="nome", required, value=produto.nome)

          label Descrição:
          textarea(name="descricao", required)= produto.descricao

          label Preço:
          input(type="number", step="0.01", name="preco", required, value=produto.preco)

          label Desconto (%):
          input(type="number", step="0.01", name="desconto", value=produto.desconto)

          label Estoque (quantidade de pares):
          input(type="number", name="quantidadePares", required, min="0", value=produto.quantidadePares)

          //- Seleção de cores
          - const cores = produto.cores ? JSON.parse(produto.cores) : [];
          label Cores disponíveis:
          .opcoes-wrapper
            each cor in cores
              button(type="button", class="opcao-btn selected", data-type="cor", data-value=cor)= cor
          input(type="text", id="coresInput", placeholder="Digite novas cores separadas por vírgula")
          input(type="hidden", name="cores", id="coresHidden", value=JSON.stringify(cores))

          //- Seleção de tamanhos
          - const tamanhos = produto.tamanhos ? JSON.parse(produto.tamanhos) : [];
          label Tamanhos disponíveis:
          .opcoes-wrapper
            each tam in tamanhos
              button(type="button", class="opcao-btn selected", data-type="tamanho", data-value=tam)= tam
          input(type="text", id="tamanhosInput", placeholder="Digite novos tamanhos separados por vírgula")
          input(type="hidden", name="tamanhos", id="tamanhosHidden", value=JSON.stringify(tamanhos))

          label Categoria:
          select(name="categoriaId", required)
            each categoria in categorias
              option(value=categoria.id, selected=(produto.categoriaId === categoria.id))= categoria.nome

          label Imagens do Produto (até 10):
          input(type="file", name="imagens", accept="image/*", multiple)

          .botoes-container
            button(type="button", class="btn-laranja", onclick="window.location.href='/'") Voltar
            button(type="submit", class="btn-laranja") Salvar

    script.
      const opcaoBtns = document.querySelectorAll('.opcao-btn');
      const coresHidden = document.getElementById('coresHidden');
      const tamanhosHidden = document.getElementById('tamanhosHidden');

      function atualizarHidden(type) {
        if (type === 'cor') {
          const selecionadas = Array.from(document.querySelectorAll('.opcao-btn[data-type="cor"].selected')).map(b => b.dataset.value);
          const inputValores = document.getElementById('coresInput').value.split(',').map(v => v.trim()).filter(v => v);
          coresHidden.value = JSON.stringify([...new Set([...selecionadas, ...inputValores])]);
        } else if (type === 'tamanho') {
          const selecionadas = Array.from(document.querySelectorAll('.opcao-btn[data-type="tamanho"].selected')).map(b => b.dataset.value);
          const inputValores = document.getElementById('tamanhosInput').value.split(',').map(v => v.trim()).filter(v => v);
          tamanhosHidden.value = JSON.stringify([...new Set([...selecionadas, ...inputValores])]);
        }
      }

      opcaoBtns.forEach(btn => {
        btn.addEventListener('click', () => {
          btn.classList.toggle('selected');
          atualizarHidden(btn.dataset.type);
        });
      });

      document.getElementById('coresInput').addEventListener('input', () => atualizarHidden('cor'));
      document.getElementById('tamanhosInput').addEventListener('input', () => atualizarHidden('tamanho'));
