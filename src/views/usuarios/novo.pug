doctype html
html(lang="pt-br")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Novo Usuário - Heranças do Sul
    link(rel="stylesheet", href="/css/style.css")
  body
    .form-bg
      .form-box
        h2 Novo Usuário
        if typeof erro !== 'undefined'
          p(style="color:red; text-align:center;")= erro

        form(action="/usuarios/novo", method="post").form-grid
          // Coluna 1 - dados pessoais
          .form-col
            label(for="nome") Nome:
            input(type="text", name="nome", id="nome", required, value=(dados && dados.nome ? dados.nome : ''))

            label(for="email") Email:
            input(type="email", name="email", id="email", required, value=(dados && dados.email ? dados.email : ''))

            label(for="telefone") Telefone:
            input(
              type="text",
              name="telefone",
              id="telefoneInput",
              placeholder="(00) 00000-0000",
              value=(dados && dados.telefone ? dados.telefone : ''),
              required
            )
            span#telefoneError(style="color:#b7410e; font-size:0.9em; display:none;") Telefone inválido. Use o formato (00) 00000-0000.

            label(for="rg") RG:
            input(
              type="text",
              name="rg",
              id="rgInput",
              placeholder="Apenas números (11 dígitos)",
              maxlength="11",
              pattern="\\d{11}",
              title="O RG deve ter 11 dígitos numéricos",
              required,
              value=(dados && dados.rg ? dados.rg : '')
            )
            span#rgError(style="color:#b7410e; font-size:0.9em; display:none;") RG inválido. Digite entre 7 e 11 dígitos numéricos.

            label(for="senha") Senha:
            input(type="password", name="senha", id="senhaInput", minlength="7", required)
            span#senhaError(style="color:#b7410e; font-size:0.9em; display:none;") Senha muito curta. Mínimo 7 caracteres.

          // Coluna 2 - endereço
          .form-col
            label(for="cep") CEP:
            input(
              type="text",
              name="cep",
              id="cepInput",
              pattern="\\d{5}-?\\d{3}",
              placeholder="00000-000",
              required,
              maxlength="9",
              value=(dados && dados.cep ? dados.cep : '')
            )
            span#cepError(style="color:#b7410e; font-size:0.9em; display:none;") CEP inválido. Use o formato 00000-000.

            label(for="pais") País:
            input(type="text", name="pais", id="pais", placeholder="Brasil", required, value=(dados && dados.pais ? dados.pais : ''))

            label(for="estado") Estado:
            input(type="text", name="estado", id="estado", required, value=(dados && dados.estado ? dados.estado : ''))

            label(for="cidade") Cidade:
            input(type="text", name="cidade", id="cidade", required, value=(dados && dados.cidade ? dados.cidade : ''))

            label(for="municipio") Bairro:
            input(type="text", name="municipio", id="municipio", required, value=(dados && dados.municipio ? dados.municipio : ''))

          // Container flex para os botões (ocupa as 2 colunas)
          .form-buttons(style="grid-column: span 2; display: flex; justify-content: space-between; align-items: center;")
            a(href="/")
              button(type="button", style="background-color: #b7410e; color: #fff; padding: 12px 24px; border: none; border-radius: 5px; cursor: pointer;") Voltar
            button(type="submit").btn Cadastrar

    if erro
      script.
        alert("#{erro}")

    style.
      html, body { height: 100%; margin: 0; padding: 0; background: #1a1a1a; color: #fff; }
      .form-bg { min-height: 100vh; width: 100%; display: flex; flex-direction: column; align-items: center; justify-content: flex-start; padding-top: 40px; padding-bottom: 40px; background: #1a1a1a; }
      .form-box { background: #222; border: 2.5px solid #b7410e; border-radius: 10px; padding: 40px 32px; box-shadow: 0 2px 16px #0005; color: #fff; display: block; width: 100%; max-width: 800px; box-sizing: border-box; }
      .form-box h2 { margin-bottom: 24px; text-align: center; color: #b7410e; }
      .form-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px 40px; }
      .form-col label { display: block; margin-bottom: 8px; font-size: 1.05em; color: #fff; }
      .form-col input { width: 100%; padding: 8px; margin-bottom: 8px; border-radius: 4px; border: 1px solid #444; background: #333; color: #fff; font-size: 1em; box-sizing: border-box; }
      .form-buttons { margin-top: 12px; }
      .btn { padding: 12px 24px; font-size: 1.05em; border: none; border-radius: 5px; background: #b7410e; color: #fff; cursor: pointer; }
      .btn:hover { background: #99330c; }

    script.
      (function() {
        const telefoneInput = document.getElementById('telefoneInput');
        const telefoneError = document.getElementById('telefoneError');
        if (telefoneInput) {
          telefoneInput.addEventListener('input', function() {
            let v = this.value.replace(/\D/g,'').slice(0,11);
            v = v.replace(/^(\d{2})(\d)/g,'($1) $2').replace(/(\d{5})(\d{4})$/,'$1-$2');
            this.value = v;
            telefoneError.style.display = /^\(\d{2}\) \d{4,5}-\d{4}$/.test(v) ? 'none' : 'block';
          });
        }

        const rgInput = document.getElementById('rgInput');
        const rgError = document.getElementById('rgError');
        if (rgInput) {
          rgInput.addEventListener('input', function() {
            let v = this.value.replace(/\D/g,'').slice(0,11);
            this.value = v;
            rgError.style.display = /^\d{11}$/.test(v) ? 'none' : 'block';
          });
        }

        const cepInput = document.getElementById('cepInput');
        const cepError = document.getElementById('cepError');
        if (cepInput) {
          cepInput.addEventListener('input', function() {
            let v = this.value.replace(/\D/g,'').slice(0,8);
            if(v.length>5) v=v.replace(/^(\d{5})(\d{1,3})/,'$1-$2');
            this.value = v;
            cepError.style.display = /^\d{5}-?\d{3}$/.test(v) ? 'none' : 'block';
          });
        }

        const senhaInput = document.getElementById('senhaInput');
        const senhaError = document.getElementById('senhaError');
        if (senhaInput) {
          senhaInput.addEventListener('input', function() {
            senhaError.style.display = this.value.length >= 7 ? 'none' : 'block';
          });
        }

        const form = document.querySelector('form[action="/usuarios/novo"]');
        if (form) {
          form.addEventListener('submit', function(e) {
            const invalid = (telefoneError && telefoneError.style.display !== 'none') ||
                            (rgError && rgError.style.display !== 'none') ||
                            (cepError && cepError.style.display !== 'none') ||
                            (senhaError && senhaError.style.display !== 'none');
            if (invalid) {
              e.preventDefault();
              alert('Por favor corrija os campos destacados antes de enviar o formulário.');
            }
          });
        }
      })();
